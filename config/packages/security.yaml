security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
        app_user_client_provider:
            entity:
                class: App\Entity\UserCliente
                property: username
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        usuario:
            pattern: ^/
            form_login:
                login_path: app_login
                check_path: app_login_check
                enable_csrf: true
                default_target_path: /home
                provider: app_user_provider
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
                # where to redirect after logout
                # target: app_any_route
        cliente:
            pattern: ^/client/auth
            form_login:
                login_path: app_login_client
                check_path: app_login_client_check
                default_target_path: /client/dashboard
                provider: app_user_client_provider

            logout:
                path: app_logout_client
                target: app_login_client

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: '^/prestamos', roles: IS_AUTHENTICATED_FULLY }
        - { path: '/home', roles: IS_AUTHENTICATED_FULLY }
        - { path: '/client/dashboard', roles: ROLE_CLIENTE }
        - { path: ^/client/auth/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/client/auth/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/client/logout, roles: IS_AUTHENTICATED_ANONYMOUSLY }



        
        #- { path: '/register', roles: ROLE_ADMIN }




        
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
